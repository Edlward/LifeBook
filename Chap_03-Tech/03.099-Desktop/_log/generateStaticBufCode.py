#!/usr/bin/python
#
#
# Mempool utility..
#
#
import os
import sys
import re
import string
import time

def usage():
    print "Usage: %s < <paramfile> | --disable > <destinationfile>" % ( sys.argv[0] )
    print
    print "\tparamfile\t- text file containing a python dictionary specifying buffer sizes and number of buffers."
    print "\t--disable\t- disable static memory pool, generates a static memory pool of size 0."
    print "\tdestinationfile\t- destination file for generated source code."
    print
    print "Example param file:"
    print "# --- start of file ---"
    print "{"
    print "\t11: 1, # one buffer with size 11"
    print "\t22: 2  # 2 buffers with size 22"
    print "}"
    print "# --- end of file ---"

    exit ( 1 )

ENABLE_STATIC_BUFFERS = True

# mempool buffer sizes
MEMPOOL_SIZES = []
# number of buffers for each mempool size
MEMPOOL_COUNTS = []

# read parameters from file or disable static buffers...
PARAMFILE = None
if ( len( sys.argv ) != 3 ):
    usage()

PARAMFILE = sys.argv[1]
SOURCEFILE = sys.argv[2]

if ( PARAMFILE == "--disable" ):
    ENABLE_STATIC_BUFFERS = False
else:
    try:
        tmp_dict = eval(open(PARAMFILE, 'U').read())
    except:
        print "Error: Unable to read %s" % (PARAMFILE)
    if not type( tmp_dict ) == dict:
        usage()

    MEMPOOL_SIZES = tmp_dict.keys()
    MEMPOOL_SIZES.sort()
    for i in MEMPOOL_SIZES:
        MEMPOOL_COUNTS.append( tmp_dict[ i ] )

if not ENABLE_STATIC_BUFFERS:
    MEMPOOL_SIZES = []
    MEMPOOL_COUNTS = []


if len( MEMPOOL_SIZES ) != len( MEMPOOL_COUNTS ):
    print "******** error: MEMPOOL_SIZES != MEMPOOL_COUNTS"
    exit( 1 )


vSizes = []
vCount = []
vFreeListNames = []
vBufs = []

vDefines = []
vStaticVariables = []

vDefines.append( "" )

for i in range( len( MEMPOOL_SIZES ) ):
    size = MEMPOOL_SIZES[i]
    count = MEMPOOL_COUNTS[i]

    vSizeName = "MBS_MEMBUF_%d_SIZE" % i
    vCountName = "MBS_MEMBUF_%d_COUNT" % i
    vFreeListName = "gMbsBufferFreeList%d" % ( i )
    vBufName = "gMbsBufferPool%d" % ( i )

    vSizes.append( vSizeName )
    vCount.append( vCountName )
    vFreeListNames.append( vFreeListName )
    vBufs.append( vBufName )

    vDefines.append( "#define %s\tMBS_BUFFER_ALIGN( %d )" % ( vSizeName, size ) )
    vDefines.append( "#define %s\t%d" % ( vCountName, count ) )

    vStaticVariables.append( "static uint8_t %s[ %s ];" % ( vFreeListName, vCountName ) )
    vStaticVariables.append( "static uint8_t %s[ %s ];" % ( vBufName, "MBS_BUFFER_ACTUAL_SIZE( %s ) * %s" % ( vSizeName, vCountName ) ) )
    vStaticVariables.append( "" )


sys.stdout.write( "Updating %s ...\n" % SOURCEFILE )


# redirect stdout to source file
orig_stdout = sys.stdout
sys.stdout = open( SOURCEFILE, "w" )

print "/* Copyright  2011 ASSA ABLOY AB, "
print " * Klarabergsviadukten 90, "
print " * Stockholm, Sweden. "
print " * All rights reserved "
print " */ "
print
print "/** "
print " * \\file        %s" % ( os.path.basename( SOURCEFILE ) )
print " *"
print " *              Automatically created by %s" % os.path.basename( sys.argv[0] )
print " *              Do not edit this file manually, changes will be overwritten!"
print " *"
print " *              Generation date:\t%s" % ( time.ctime() )
print " *              Generated by command:\t%s" % ( string.join( sys.argv, " " ) )
print " *"
username = ""
if os.environ.has_key( 'USER' ):
    username = os.environ['USER']
print " * \\author      %s" % username
print " *"
print " */"

print "#ifdef USE_MBS_STATIC_BUFFERS"
print "// Include files --------------------------------------"
print "#include <stdint.h>"
print "#include \"mbsBuffer.h\""
print "#include \"mbsBufferCommon.h\""
print "#include \"mbsBufferStaticData.h\""
print "#include \"mbsBufferHeapStatistics.h\""

print
print "// Module defines -------------------------------------"
for i in vDefines:
    print i
print
print "#define MBS_MEMPOOL_SIZE_DEFINE %d" % ( len( MEMPOOL_SIZES ) )
print ""

print "// Module types and type definitions ------------------"
print "// Module interface variables and constants -----------"
print "// Static variables and constants ---------------------"
for i in vStaticVariables:
    print i
print
print "#if ( MBS_BUFFER_TRACK_ALLOCATIONS != 0 )"
print "HeapStatisticsStatic	gHeapStatisticsStatic[ MBS_MEMPOOL_SIZE_DEFINE ];"
print "#endif"
print
print "const uint8_t MBS_MEMPOOL_SIZE = MBS_MEMPOOL_SIZE_DEFINE;"
print "MbsBufferStaticMemPoolEntry gMbsBufferStaticMemPool[ MBS_MEMPOOL_SIZE_DEFINE ] = "
print "    {"
for i in range( len( MEMPOOL_SIZES ) ):
    print "        { %s, %s, 0, %s, %s }, " % ( vSizes[i], vCount[i], vFreeListNames[i], vBufs[i] )

print "    };"
print
print "// Static function declarations -----------------------"
print "// Static function definitions ------------------------"
print "// Module interface function definitions --------------"
print "#endif"
sys.stdout.close()
sys.stdout = orig_stdout


sys.stdout.write( "Done.\n" )
