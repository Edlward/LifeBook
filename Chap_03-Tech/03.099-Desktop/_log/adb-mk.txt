# ABS [Alternative Build System] for MBS# Author: Andrzej Glabek# Copyright (c) 2014 ASSA ABLOY AB# ['gcc' is required for dependency generation, see "%.o" recipe]$(call abs-check-commands,gcc)_ABS_CMDS := build program clean rebuild.PHONY: $(_ABS_CMDS)include $(ABS_SYS_DIR)openocd.mkifdef MBS_ALT_POSTBUILD	include $(MBS_ALT_POSTBUILD)else	include $(ABS_SYS_DIR)postBuild.mkendif# Order of search:# - look in products/ folder,# - try to use the path as relative to SDK root,# - try to use the path relative to MBS_SDK,# - find the path in products/ folder or its subfolders,# - find the path in whole SDK source tree.define abs-find-product$(strip $(or $(wildcard $(ABS_TOP_DIR)products/$1/abs-binary.mk),             $(wildcard $(ABS_TOP_DIR)$1/abs-binary.mk),             $(wildcard $(MBS_SDK_DIR)$1/abs-binary.mk),             $(info [finding product "$1"]) \             $(or $(shell find $(ABS_TOP_DIR)products \                               -path '*/$1/abs-binary.mk' -print), \                  $(shell find $(ABS_TOP_DIR) \                               $(_ABS_EXCLUDED_PATHS_FOR_PRODUCTS) \                            -o -path $(ABS_TOP_DIR)products -prune \                            -o -path '*/$1/abs-binary.mk' -print))))endef## check flavor of variabe. Variable can have flavors: undefined, recursive, simple## args:##  	$1 variable name## 	$2 flavor type## usage:## check if variable VAR is expanded in place of it's defintion (e.g VAR := 1)## $(call validate-variable-flavor,VAR,simple)## check if variable VAR is expaned in recursive, (every time it is mentioned, VAR = 1 )## $(call validate-variable-flavor,VAR,recursive)## otherwise exit with errordefine validate-variable-flavor$(if $(filter $(flavor $1),$2),$(EMPTY),\  $(error Variable $1 expansion type is not correct. Have expansion '$(flavor $1)', Expected expansion '$2'))endefdefine abs-read-components-info$(eval _ABS_BIN_COMPONENTS := \  $(call abs-get-local-items,$(ABS_LOCAL_COMPONENTS),component) \  $(call abs-get-items,$(ABS_COMPONENTS),component))$(eval _ABS_BIN_MODULES := \  $(call abs-get-local-items,$(ABS_LOCAL_MODULES),module) \  $(call abs-get-items,$(ABS_MODULES),module))$(eval _ABS_ALL_COMPONENTS := $(_ABS_BIN_COMPONENTS))$(eval _ABS_ALL_MODULES := $(_ABS_BIN_MODULES))$(eval $(abs-clear-vars))include $(_ABS_BIN_COMPONENTS)include $(_ABS_BIN_MODULES)endefdefine abs-create-components-cache$(call abs-read-components-info)# [deferred expansion (double $) is needed here, because _ABS_ALL_COMPONENTS#  and _ABS_LIB_MODULES values will not be valid until all modules definitions#  are processed]$$(eval _ABS_USED_COMPONENTS := \  $$(patsubst $(ABS_TOP_DIR)%/abs-component.mk,%, \    $$(realpath $$(_ABS_ALL_COMPONENTS))))$$(eval _ABS_USED_MODULES := \  $$(patsubst $(ABS_TOP_DIR)%/abs-module.mk,%, \    $$(realpath $$(_ABS_ALL_MODULES))))$$(call abs-notice,creating "$1")$$(shell echo '# Autogenerated file, do not edit' > $1; \         $$(call abs-echo-multi,_ABS_USED_COMPONENTS,$1); \         $$(call abs-echo-multi,_ABS_USED_MODULES,$1); \         $$(call abs-echo-multi,_ABS_LIB_MODULES,$1))endefdefine abs-read-components-cache# [$$, so this notice appears together with the one below ("components:")] $$(call abs-notice,using cached data from "$1")$(eval $(abs-clear-vars))include $(addsuffix /abs-component.mk,$(_ABS_USED_COMPONENTS))endefdefine abs-use-components-cache# Try to read cache file$(eval -include $1)# If _ABS_USED_COMPONENTS was not set during above evaluation, either cache# file does not exist or it is invalid (perhaps we have emptied it after# discovering that it should be recreated - see 'abs-check-cache')$(if $(value _ABS_USED_COMPONENTS), \  $(call abs-read-components-cache,$1), \  $(call abs-create-components-cache,$1))# [regarding double $ -> see 'abs-create-components-cache'] $$(call abs-notice,[components: $$(words $$(_ABS_USED_COMPONENTS))])endef# Here we check if our cached data is up to data - if some changes were done# to the product definition or to one of the modules it uses we need to read# again all these definitions and recreate our cachedefine abs-check-cache#---- recipes (TABs are imporant here) ----$(ABS_BINARY)_cache: $(ABS_THIS_MK) \                     $(addsuffix /abs-module.mk,$(_ABS_USED_MODULES))	$$(call abs-notice,restarting in order to refresh cached data)	echo > $$@#-----------------------------------------endef# list of variable names (separated by space)# that is :# 	1. checked for correct settings before starting to create launch-file# 	2. evaluated to proper variable so templates/debug.launch is started correctly## The variables create an enviroment that emulates running command like :# _ABS_CMD_OPENOCD=tools/debug/bin/openocd.sh OPENOCD_HW=stm32l1 .... ./tools/ABS/templates/debug.launch > $$@# MBS_SDK is removed from check as it may be emptyABS_LAUNCHFILE_VARS := _ABS_CMD_KILL_OPENOCD _ABS_CMD_OPENOCD _ABS_OPENOCD_SCRIPTS_MBS \   	_ABS_OPENOCD_SCRIPTS_DIR MBS_OPENOCD_INTERFACE _ABS_CMD_GDB ABS_BINARY OPENOCD_HW define abs-launch-file-validate-vars$(foreach var,$(ABS_LAUNCHFILE_VARS), $(if $($(var)),$(EMPTY), \	$(error Error Creating launch-file variable $(var) is emtpy)))endefdefine abs-launch-file-cmd$(strip $(call abs-launch-file-validate-vars) $(foreach var,$(ABS_LAUNCHFILE_VARS),$(var)=$($(var))) MBS_SDK=$(MBS_SDK))endefdefine abs-launch-file  $(ABS_OUTDIR)$(ECLIPSEPROJECT),$(subst \    /,-,$(ABS_THIS))$2,$(ABS_BUILD_HW),$(MBS_OPENOCD_INTERFACE),$1.launchendefdefine abs-create-launch-file#---- recipes (TABs are imporant here) ----	$(if $(ECLIPSEPROJECT), $(strip \		echo Creating launch file: $$(notdir $$@) ; \	set -e ;$(call abs-launch-file-cmd) $$< > $$@),$(EMPTY))#-----------------------------------------endefdefine abs-run-post-build-runner	$(info Running post build runner...) \	$(if abs-platform-specific-post-build, $(call abs-platform-specific-post-build,$1,$2))endef# $1 object file# $2 source file(s)# $3 flagsdefine abs-compile-hook	$(if abs-platform-specific-compile-hook, $(call abs-platform-specific-compile-hook, $1, $2, $3))endefdefine abs-build$(call abs-mkdir,$(ABS_OUTDIR))$(eval ABS_BINARY := $(ABS_OUTDIR)$(subst /,-,$(ABS_THIS)).elf)$(eval _ABS_ALL_INCLUDE_PATHS := \  $(addprefix -I$(ABS_THIS)/,$(ABS_INCLUDE_PATHS)))$(eval _ABS_ALL_DEFINES := $(addprefix -D,$(ABS_DEFINES)))$(eval _ABS_ALL_LINK_FLAGS := $(ABS_LINK_FLAGS))$(eval _ABS_ALL_LIBRARIES := $(ABS_LIBRARIES))$(eval _ABS_GENERATORS_MAPS := \  $(call abs-add-path-to-maps,$(ABS_THIS_DIR),$(ABS_GENERATORS_MAPS)))$$(info Reading makefiles...)$(if $(ABS_USE_CACHE), \  $(call abs-use-components-cache,$(ABS_BINARY)_cache) \    $(eval $(abs-check-cache)), \  $(call abs-read-components-info))$$(info $$(call rds-versioning))#---- recipes (TABs are imporant here) ----# [we need to use deferred expansion (double $) for _ABS_ALL_LINK_FLAGS,#  _ABS_LD_FILE, _ABS_ALL_LIBRARIES and _ABS_LIB_MODULES, because their#  values will not be properly composed before all components are processed] $(ABS_BINARY):	$$(info Linking...)	$(ABS_SILENT)$$(call abs-tool-link,$$@,$$^ $$(_ABS_LIB_MODULES), \	  $$(_ABS_ALL_LINK_FLAGS),$$(_ABS_LD_FILE),$$(_ABS_ALL_LIBRARIES))	$$(call abs-run-post-build-runner, $$@,$(ABS_BINARY_MFW_TYPE))build: $(ABS_BINARY) \       $(if $(ECLIPSEPROJECT), \           $(call abs-launch-file,debug) \           $(call abs-launch-file,program-and-debug) \           $(call abs-launch-file,debug,-for-bootloader) \           $(call abs-launch-file,program-and-debug,-for-bootloader), \         $(info ECLIPSEPROJECT not set, launch files will not be created))program: $(ABS_BINARY)	$$(info Programming...)	$(if $(ABS_FOR_BOOT), $$(info BINARY = $(ABS_BINARY:.elf=-for-bootloader.elf)), $$(info BINARY = $(ABS_BINARY)))	$(if $(ABS_FOR_BOOT), $(ABS_SILENT)$$(call abs-tool-program,$$(ABS_BINARY:.elf=-for-bootloader.elf)), $(ABS_SILENT)$$(call abs-tool-program,$$<))$(ABS_OUTDIR)/inc/versioning.h:	$(call rds-versioning)clean:rebuild: build# [$(ABS_BINARY) is an order-only prerequisite for launch files, so they will#  be created after successful linking, but only once - there is no need to#  update them later on, their content is not dependent on changes in binary]$(call abs-launch-file,debug): \        $(ABS_SYS_DIR)templates/debug.launch | $(ABS_BINARY)	$(call abs-create-launch-file,$(ABS_BINARY))$(call abs-launch-file,program-and-debug): \        $(ABS_SYS_DIR)templates/program-and-debug.launch | $(ABS_BINARY)	$(call abs-create-launch-file,$(ABS_BINARY))$(call abs-launch-file,debug,-for-bootloader): \        $(ABS_SYS_DIR)templates/debug.launch | $(ABS_BINARY)	$(call abs-create-launch-file,$(ABS_BINARY:.elf=-for-bootloader.elf))$(call abs-launch-file,program-and-debug,-for-bootloader): \        $(ABS_SYS_DIR)templates/program-and-debug.launch | $(ABS_BINARY)	$(call abs-create-launch-file,$(ABS_BINARY:.elf=-for-bootloader.elf))#-----------------------------------------endefdefine abs-make-binary$(eval ABS_OUTDIR := $(ABS_OUTPUT)/$1/$(ABS_BUILD_CFG)/)$(if $(filter $(_ABS_COMMAND),clean rebuild), \  $(info Cleaning...) \  $(shell rm -rf $(ABS_OUTDIR)))$(if $(filter $(_ABS_COMMAND),clean),,$(call abs-build))endefdefine abs-binaryifeq (all,$(ABS_BUILD_CFG))  $$(info make $(ABS_GOAL))  $$(info ABS - making product "$(ABS_THIS)", all configurations)  _ABS_ALL_CONFIGURATIONS := \    $(foreach config,$(ABS_BUILD_CONFIGS),$(ABS_THIS),$(config))else  # Normalize build configurations listed in the binary definition (i.e. add  # ommited parts), so we can use them in the filter below  $(eval _ABS_BUILD_CONFIGS := \    $(foreach config,$(ABS_BUILD_CONFIGS),$(call abs-split,$(config)) \      $(call abs-get-word,1)-$(call abs-get-word,2)-$(call abs-get-word, \        3)-$(call abs-get-word,4)))  ifeq (,$(ABS_BUILD_CFG))    $$(info Build configurations available for product "$(ABS_THIS)":)    $(foreach config,$(_ABS_BUILD_CONFIGS),$$(info - $(config)))  else    $$(info ABS - making product "$(ABS_THIS)", configuration:)    $$(info - ABS_BUILD_ARCH: $(ABS_BUILD_ARCH))    $$(info - ABS_BUILD_VAR:  $(ABS_BUILD_VAR))    $$(info - ABS_BUILD_CPU:  $(ABS_BUILD_CPU))    $$(info - ABS_BUILD_HW:   $(ABS_BUILD_HW))    # If the build configuration specified in the target name is supported    # for desired binary - build it, otherwise complain and list all possible    # options to help the user choose something suitable    $(if $(filter $(ABS_BUILD_CFG),$(_ABS_BUILD_CONFIGS)), \      $(call abs-make-binary,$(subst /,-,$(ABS_THIS))), \      $$(info Configuration "$(ABS_BUILD_CFG)" is not supported,) \      $$(info for this product use one of the following:) \      $(foreach config,$(_ABS_BUILD_CONFIGS),$$(info - $(config))))  endifendifendefdefine abs-module$(eval _ABS_MOD_COMPONENTS := \  $(call abs-get-local-items,$(ABS_LOCAL_COMPONENTS),component) \  $(call abs-get-items,$(ABS_COMPONENTS),component))$(eval _ABS_ALL_COMPONENTS += $(_ABS_MOD_COMPONENTS))$(eval $(abs-clear-vars))$(eval _ABS_LIB_MOD := )include $(_ABS_MOD_COMPONENTS)# [we want to check the value of _ABS_LIB_MOD and it will be (if applicable)#  set in a makefile included in the line above, so we need to wait with that#  checking for the second phase of makefile processing, hence we use deferred#  expansion (double $)]# [special patch is needed for 'hccTiny' until building process for this#  library is corrected]$$(if $$(_ABS_LIB_MOD), \  $$(eval _ABS_LIB_MODULES += \    $$(if $$(filter %hccTiny,$(ABS_THIS)), \      $(ABS_THIS)/lib/$(ABS_BUILD_CFG)/libmodules-fs-hccTiny.a)))endefdefine abs-component$(eval _ABS_COMP_OUTDIR := $(ABS_OUTDIR)obj/$(subst /,-,$(ABS_THIS)))$(call abs-mkdir,$(_ABS_COMP_OUTDIR))$(eval _ABS_COMP_OBJS := \  $(foreach file,$(ABS_SOURCE_FILES), \    $(if $(wildcard $(ABS_THIS)/$(file)), \      $(call abs-src2obj,$(file),$(ABS_THIS)/$(file)), \      $(call abs-warning,file "$(file)" does not exist [$(ABS_THIS_MK)]))))$(eval _ABS_COMP_OBJS += \  $(foreach file, \    $(filter-out %.$(ABS_GENERATED).h,$(ABS_GEN_SOURCE_FILES)), \      $(call abs-src2obj,$(file),$(_ABS_COMP_OUTDIR)/$(subst /,-,$(file)))))# For each file that should be generated during the building process set its# generator input files according to the the ABS_GENERATORS_MAPS variable value# set in the binary definition; additionaly for header files create a dependency# rule stating that all object files created for this component are dependant# on this header file (so all header files will be generated first).# Expression "$(_ABS_GEN_FILE) := $(file)" means: create a variable named# exactly as the file to be generated (with path) and assign originally provided# file name (without path) as its value - it will be used to display proper# message when generating the file in question; see 'abs-generate' function# in the "build.mk" file - the expression "$(or $($1),$1)".$(foreach file,$(ABS_GEN_SOURCE_FILES), \  $(eval _ABS_GEN_FILE := $(_ABS_COMP_OUTDIR)/$(subst /,-,$(file))) \  $(if $(_ABS_GEN_FILE:%.$(ABS_GENERATED).h=%), \    $(eval $(_ABS_COMP_OBJS): $(_ABS_GEN_FILE))) \  $(eval $(_ABS_GEN_FILE) := $(file)) \  $(call abs-set-generator-input,$(_ABS_GEN_FILE),$(_ABS_GENERATORS_MAPS)))# If some header files are to be generated we need to add their folder (i.e.# component output folder - this is the place where we place generated files)# to include paths$(if $(filter %.$(ABS_GENERATED).h,$(ABS_GEN_SOURCE_FILES)), \  $(eval _ABS_ALL_INCLUDE_PATHS += -I$(_ABS_COMP_OUTDIR)))$(eval _ABS_ALL_INCLUDE_PATHS += $(addprefix -I$(ABS_THIS)/,$(ABS_INTERFACE)))$(eval _ABS_ALL_INCLUDE_PATHS += -I$(ABS_OUTDIR)/inc/)$(eval _ABS_ALL_DEFINES += $(addprefix -D,$(ABS_DEFINES)))$(eval _ABS_ALL_LINK_FLAGS += $(ABS_LINK_FLAGS))$(eval _ABS_ALL_LIBRARIES += $(ABS_LIBRARIES))$(if $(ABS_LINK_SCRIPT), \  $(info $$ABS_LINK_SCRIPT is [${ABS_LINK_SCRIPT}]) \  $(eval _ABS_LD_FILE := $(ABS_THIS)/$(ABS_LINK_SCRIPT)))$(if $(ABS_LIB_SOURCE_FILES),$(eval _ABS_LIB_MOD := 1))$(eval $(ABS_BINARY): $(_ABS_COMP_OBJS))-include $(_ABS_COMP_OBJS:.o=.dep)#---- recipes (TABs are imporant here) ----# [we need to use deferred expansion (double $) for _ABS_ALL_INCLUDE_PATHS and#  _ABS_ALL_DEFINES, because their values are composed from data collected from#  components (see '+=' expressions above), hence they are not complete till#  all components are processed] $(_ABS_COMP_OUTDIR)/%.o:	$$(info --- $(ABS_THIS) - $$($$@))	$(ABS_SILENT)gcc -MM -MF $$(@:.o=.dep) -MT $$@ -MP -MG -w \	  $$(_ABS_ALL_INCLUDE_PATHS) $$(_ABS_ALL_DEFINES) $$<	$(ABS_SILENT)$$(call abs-tool-compile, \	  $$@, \	  $$<, \	  $$(_ABS_ALL_INCLUDE_PATHS) $$(_ABS_ALL_DEFINES) $(ABS_COMPILE_FLAGS), \	  $(ABS_SUPPRESS_WARNINGS))#-----------------------------------------$(eval $(abs-clear-vars))endef###############################################################################$(if $(filter $(_ABS_COMMAND),$(_ABS_CMDS)),, \  $(error unknown command: "$(_ABS_COMMAND)"))$(if $(_ABS_PARAM1),,$(error product not specified))# Try to find a .mk-file with the definition of requested binary (product)_ABS_PRODUCT := $(call abs-find-product,$(_ABS_PARAM1))$(if $(_ABS_PRODUCT),,$(error product "$(_ABS_PARAM1)" not found))# In case more than one matching file exists signal possible confusion# and select first one for further processing$(if $(word 2,$(_ABS_PRODUCT)), \     $(call abs-warning,More than one matching product found:) \     $(foreach product,$(_ABS_PRODUCT), \       $(call abs-warning,- $(product:$(ABS_TOP_DIR)%/abs-binary.mk=%))) \     $(eval _ABS_PRODUCT := $(word 1,$(_ABS_PRODUCT))))# [build all configurations defined specified product]ifeq (all,$(_ABS_PARAM2))  ABS_BUILD_CFG := $(_ABS_PARAM2)  include $(_ABS_PRODUCT)  _ABS_MAKE_CONFIGURATION := $(MAKE) $(_ABS_COMMAND),  # We need to prohibit parallel processing here to have messages  # "testStarted/Finished" paired properly - TeamCity appears to fail  # to match these messages if they are not sent in order and tries to  # show tests as nested (?)  .NOTPARALLEL:  #---- recipes (TABs are imporant here) ----  # [we replace comma with dot in the target name (product,build-config) when  #  we pass it as a test name for TeamCity to allow it to be splitted into  #  class and test parts]  # ["+" is needed to tell make that in this recipe a sub-make is invoked]  .PHONY: $(_ABS_ALL_CONFIGURATIONS)  $(_ABS_ALL_CONFIGURATIONS):	+@$(call abs-test-and-report, \	  $(_ABS_MAKE_CONFIGURATION)$@,$(subst $(_ABS_COMMA),.,$@))  #------------------------------------------  # "Here is where the magic happens"  $(ABS_GOAL): $(_ABS_ALL_CONFIGURATIONS)else  # [if configuration is not specified it means the user requests a list of  #  all available configurations for this product]  -include $(MBS_SDK_DIR)tools/ABS/toolchains/$(ABS_BUILD_ARCH).mk  ifneq (,$(_ABS_PARAM2))    ifndef abs-tool-compile      $(error architecture $(ABS_BUILD_ARCH) don't have defined compiler in $(MBS_SDK_DIR)tools/ABS/toolchains)    endif    $(call validate-variable-flavor,_ABS_CFLAGS,recursive)    $(call validate-variable-flavor,ABS_OPTIMIZATION_LEVEL,recursive)    # "Here is where the magic happens"    $(ABS_GOAL): $(_ABS_COMMAND)  endif  include $(_ABS_PRODUCT)endif# Successful reading of binary definition should result in the evaluation# of 'abs-begin' and this in turn should assign some value to ABS_THISifndef ABS_THIS  $(error no valid binary definition found in: $(_ABS_PRODUCT))endif_ABS_RESULT := ABS - "$(ABS_GOAL)" done