
<!DOCTYPE html>
<html lang="zh-cn">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Gradle学习系列之一——Gradle快速入门 - 无知者云 - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=-hy83QNg62d4qYibixJzxMJkbf1P9fTBlqv7SK5zVL01"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/elf/bundle-elf.css?v=JHcmlukWR_bF1f6wNjCxPO-MfAKMYz5QllMp4s2snCY1"/>
<link type="text/css" rel="stylesheet" href="/blog/customcss/99349.css?v=31Cxs4xOXClwRwu60oCjw0x5DWA%3d"/>
<link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/elf/bundle-elf-mobile.css?v=v8T2RoJv5U8rbtl0h61BpmWAB6lL95ijRUoDdO22L_o1"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/davenkin/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/davenkin/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/davenkin/wlwmanifest.xml"/>
<script src="//common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
<script type="text/javascript">var currentBlogApp = 'davenkin', cb_enable_mathjax=false;var isLogined=false;</script>
<script src="/bundles/blog-common.js?v=d16NGD79qD3qnJt25hXDZ2sGoojamz2W5Rl4vT0CGVg1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/davenkin/"><img id="blogLogo" src="/Skins/custom/images/logo.gif" alt="返回主页" /></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/davenkin/">无知者云</a></h1>
<h2></h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li><a id="blog_nav_myhome" class="menu" href="http://www.cnblogs.com/davenkin/">首页</a></li>
<li></li>
<li><a id="blog_nav_contact" class="menu" rel="nofollow" href="https://msg.cnblogs.com/send/%E6%97%A0%E7%9F%A5%E8%80%85%E4%BA%91">联系</a></li>
<li><a id="blog_nav_rss" class="menu" href="http://www.cnblogs.com/davenkin/rss">订阅</a>
<!--<a id="blog_nav_rss_image" class="aHeaderXML" href="http://www.cnblogs.com/davenkin/rss"><img src="//www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li><a id="blog_nav_admin" class="menu" rel="nofollow" href="https://i.cnblogs.com/">管理</a></li>
</ul>
		<div class="blogStats">
			
			<div id="blog_stats">
<span id="stats_post_count">随笔 - 90&nbsp; </span>
<span id="stats_article_count">文章 - 0&nbsp; </span>
<span id="stats-comment_count">评论 - 230</span>
</div>
			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<div id="post_detail">
<!--done-->
<div id="topics">
	<div class = "post">
		<h1 class = "postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/davenkin/p/gradle-learning-1.html">Gradle学习系列之一——Gradle快速入门</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body" class="blogpost-body"><p><span style="font-size: 15px;">这是一个关于Gradle的学习系列，其中包含以下文章：</span></p>
<ol>
<li style="list-style-type: none;"><ol>
<li><span style="font-size: 15px;"><a href="http://www.cnblogs.com/davenkin/p/gradle-learning-1.html">Gradle快速入门</a></span></li>
<li><span style="font-size: 15px;"><a href="http://www.cnblogs.com/davenkin/p/gradle-learning-2.html" target="_blank">创建Task的多种方法</a></span></li>
<li><span style="font-size: 15px;"><a href="http://www.cnblogs.com/davenkin/p/gradle-learning-3.html" target="_blank">读懂Gradle语法</a></span></li>
<li><span style="font-size: 15px;"><a href="http://www.cnblogs.com/davenkin/p/gradle-learning-4.html" target="_blank">增量式构建</a></span></li>
<li><span style="font-size: 15px;"><a href="http://www.cnblogs.com/davenkin/p/gradle-learning-5.html" target="_blank">自定义Property</a></span></li>
<li><span style="font-size: 15px;"><a href="http://www.cnblogs.com/davenkin/p/gradle-learning-6.html" target="_blank">使用java Plugin</a></span></li>
<li><span style="font-size: 15px;"><a href="http://www.cnblogs.com/davenkin/p/gradle-learning-7.html" target="_blank">依赖管理</a></span></li>
<li><span style="font-size: 15px;"><a href="http://www.cnblogs.com/davenkin/p/gradle-learning-8.html" target="_blank">构建多个Project</a></span></li>
<li><span style="font-size: 15px;"><a href="http://www.cnblogs.com/davenkin/p/gradle-learning-9.html" target="_blank">自定义Task类型</a></span></li>
<li><span style="font-size: 15px;"><a href="http://www.cnblogs.com/davenkin/p/gradle-learning-10.html" target="_blank">自定义Plugin</a></span></li>
</ol></li>
</ol>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><span style="font-size: 15px;"><img style="display: block; margin-left: auto; margin-right: auto;" src="https://images2015.cnblogs.com/blog/341412/201512/341412-20151211131838761-1391981992.jpg" alt="" width="518" height="296" /></span></p>
<p><span style="font-size: 15px;">　　</span></p>
<p><span style="font-size: 15px;">　　请通过以下方式下载本系列文章的Github示例代码：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 15px;">git clone https:<span style="color: #008000;">//</span><span style="color: #008000;">github.com/davenkin/gradle-learning.git</span></span></pre>
</div>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<hr />
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><span style="font-size: 15px;">　　和Maven一样，Gradle只是提供了构建项目的一个框架，真正起作用的是Plugin。Gradle在默认情况下为我们提供了许多常用的Plugin，其中包括有构建Java项目的Plugin，还有War，Ear等。与Maven不同的是，Gradle不提供内建的项目生命周期管理，只是java Plugin向Project中添加了许多Task，这些Task依次执行，为我们营造了一种如同Maven般项目构建周期。更多有关Maven的知识，读者可以访问<a href="http://maven.apache.org/" target="_blank">Maven官网</a>，或者可以参考笔者写的<a href="http://www.cnblogs.com/davenkin/p/advanced-maven-multi-module-vs-inheritance.html" target="_blank">Maven学习系列文章</a>。</span></p>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><span style="font-size: 15px;">　　现在我们都在谈领域驱动设计，Gradle本身的领域对象主要有Project和Task。Project为Task提供了执行上下文，所有的Plugin要么向Project中添加用于配置的Property，要么向Project中添加不同的Task。一个Task表示一个逻辑上较为独立的执行过程，比如编译Java源代码，拷贝文件，打包Jar文件，甚至可以是执行一个系统命令或者调用Ant。另外，一个Task可以读取和设置Project的Property以完成特定的操作。</span></p>
<p><span style="font-size: 15px;">　　让我们来看一个最简单的Task，创建一个build.gradle文件，内容如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 15px;">task helloWorld &lt;&lt;<span style="color: #000000;"> {
   println </span>"Hello World!"<span style="color: #000000;">
}</span></span></pre>
</div>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><span style="font-size: 15px;">　　这里的&ldquo;&lt;&lt;&rdquo;表示向helloWorld中加入执行代码&mdash;&mdash;其实就是groovy代码。Gradle向我们提供了一整套DSL，所以在很多时候我们写的代码似乎已经脱离了groovy，但是在底层依然是执行的groovy。比如上面的task关键字，其实就是一个groovy中的方法，而大括号之间的内容则表示传递给task()方法的一个闭包。除了&ldquo;&lt;&lt;&rdquo;之外，我们还很多种方式可以定义一个Task，我们将在本系列后续的文章中讲到。</span></p>
<p><span style="font-size: 15px;">　　在与build.gradle相同的目录下执行：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 15px;">gradle helloWorld</span></pre>
</div>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><span style="font-size: 15px;">　　命令行输出如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 15px;"><span style="color: #000000;">:helloWorld
Hello World</span>!<span style="color: #000000;">

BUILD SUCCESSFUL

Total time: </span>2.544 secs</span></pre>
</div>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><span style="font-size: 15px;">　　在默认情况下，Gradle将当前目录下的build.gradle文件作为项目的构建文件。在上面的例子中，我们创建了一个名为helloWorld的Task，在执行gradle命令时，我们指定执行这个helloWorld Task。这里的helloWorld是一个DefaultTask类型的对象，这也是定义一个Task时的默认类型，当然我们也可以显式地声明Task的类型，甚至可以自定义一个Task类型（我们将在本系列的后续文章中讲到）。</span></p>
<p><span style="font-size: 15px;">　　比如，我们可以定义一个用于文件拷贝的Task：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 15px;"><span style="color: #000000;">task copyFile(type: Copy) {
   from </span>'xml'<span style="color: #000000;">
   into </span>'destination'<span style="color: #000000;">
}</span></span></pre>
</div>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><span style="font-size: 15px;">　　以上copyFile将xml文件夹中的所有内容拷贝到destination文件夹中。这里的两个文件夹都是相对于当前Project而言的，即build.gradle文件所在的目录。</span></p>
<p><span style="font-size: 15px;">　　Task之间可以存在依赖关系，比如taskA依赖于taskB，那么在执行taskA时，Gradle会先执行taskB，然后再执行taskA。声明Task依赖关系的一种方式是在定义一个Task的时候：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 15px;"><span style="color: #000000;">task taskA(dependsOn: taskB) {
   //do something</span><span style="color: #000000;">
}</span></span></pre>
</div>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><br /><span style="font-size: 15px;">　　Gradle在默认情况下为我们提供了几个常用的Task，比如查看Project的Properties、显示当前Project中定义的所有Task等。可以通过一下命令查看Project中所有的Task：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 15px;">gradle tasks</span></pre>
</div>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><span style="font-size: 15px;">　　输出如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 15px;"><span style="color: #000000;">:tasks

</span>------------------------------------------------------------<span style="color: #000000;">
All tasks runnable from root project
</span>------------------------------------------------------------<span style="color: #000000;">

Build Setup tasks
</span>-----------------<span style="color: #000000;">
setupBuild </span>- Initializes a <span style="color: #0000ff;">new</span><span style="color: #000000;"> Gradle build. [incubating]
wrapper </span>-<span style="color: #000000;"> Generates Gradle wrapper files. [incubating]

Help tasks
</span>----------<span style="color: #000000;">
dependencies </span>- Displays all dependencies declared in root project 'gradle-blog'<span style="color: #000000;">.
dependencyInsight </span>- Displays the insight into a specific dependency in root project 'gradle-blog'<span style="color: #000000;">.
help </span>-<span style="color: #000000;"> Displays a help message
projects </span>- Displays the sub-projects of root project 'gradle-blog'<span style="color: #000000;">.
properties </span>- Displays the properties of root project 'gradle-blog'<span style="color: #000000;">.
tasks </span>- Displays the tasks runnable from root project 'gradle-blog'<span style="color: #000000;">.

Other tasks
</span>-----------<span style="color: #000000;">
copyFile
helloWorld

To see all tasks and more detail, run with </span>--<span style="color: #000000;">all.

BUILD SUCCESSFUL

Total time: </span>2.845 secs</span></pre>
</div>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><span style="font-size: 15px;">　　可以看到，除了我们自己定义的copyFile和helloWorld之外，Gradle还默认为我们提供了dependencies、projects和properties等Task。dependencies用于显示Project的依赖信息，projects用于显示所有Project，包括根Project和子Project，而properties则用于显示一个Project所包含的所有Property。</span></p>
<p><span style="font-size: 15px;">　　在默认情况下，Gradle已经为Project添加了很多Property，我们可以调用以下命令进行查看：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 15px;">gradle properties</span></pre>
</div>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><span style="font-size: 15px;">　　输出如下：</span></p>
<div class="cnblogs_code">
<pre><span style="font-size: 15px;"><span style="color: #000000;">:properties

</span>------------------------------------------------------------<span style="color: #000000;">
Root project
</span>------------------------------------------------------------<span style="color: #000000;">

allprojects: [root project </span>'gradle-blog'<span style="color: #000000;">]
ant: org.gradle.api.internal.project.DefaultAntBuilder@</span>1342097<span style="color: #000000;">

buildDir: </span>/home/davenkin/Desktop/gradle-blog/<span style="color: #000000;">build
buildFile: </span>/home/davenkin/Desktop/gradle-blog/<span style="color: #000000;">build.gradle
...
configurations: []
convention: org.gradle.api.internal.plugins.DefaultConvention@11492ed
copyFile: task </span>':copyFile'<span style="color: #000000;">
...
ext: org.gradle.api.internal.plugins.DefaultExtraPropertiesExtension@1b5d53a
extensions: org.gradle.api.internal.plugins.DefaultConvention@11492ed
...
helloWorld: task </span>':helloWorld'<span style="color: #000000;">
...
plugins: [org.gradle.api.plugins.HelpTasksPlugin@7359f7]
project: root project </span>'gradle-blog'<span style="color: #000000;">
...
properties: {...}
repositories: []

tasks: [task </span>':copyFile', task ':helloWorld'<span style="color: #000000;">]
version: unspecified

BUILD SUCCESSFUL

Total time: </span>2.667 secs</span></pre>
</div>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><span style="font-size: 15px;">　　在以上Property中，allprojects表示所有的Project，这里只包含一个根Project，在多项目构建中，它将包含多个Project；buildDir表示构建结果的输出目录；我们自己定义的helloWorld和copyFile也成为了Project中的Property。另外，Project还包括用于执行Ant命令的DefaultAntBuilder（Property名为ant）和Project的描述属性description。</span></p>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><span style="font-size: 15px;">　　在<a href="http://www.cnblogs.com/davenkin/p/gradle-learning-2.html" target="_blank">下一篇</a>文章中，我们将讲到创建Task的多种方法。</span></p>
<p><span style="font-size: 15px;">&nbsp;</span></p>
<p><span style="font-size: 15px;">&nbsp;</span></p></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class = "postDesc">posted @ <span id="post-date">2013-11-11 13:20</span> <a href='http://www.cnblogs.com/davenkin/'>无知者云</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="https://i.cnblogs.com/EditPosts.aspx?postid=3417762" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(3417762);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,cb_blogId=99349,cb_entryId=3417762,cb_blogApp=currentBlogApp,cb_blogUserGuid='f66c56ee-e1f7-e011-b7b9-842b2b196315',cb_entryCreatedDate='2013/11/11 13:20:00';loadViewCount(cb_entryId);var cb_postType=1;</script>
	
</div><!--end: topics 文章、评论容器-->
</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id='comment_form' class='commentform'>
<a name='commentform'></a>
<div id='divCommentShow'></div>
<div id='comment_nav'><span id='span_refresh_tips'></span><a href='javascript:void(0);' onclick='return RefreshCommentList();' id='lnk_RefreshComments' runat='server' clientidmode='Static'>刷新评论</a><a href='#' onclick='return RefreshPage();'>刷新页面</a><a href='#top'>返回顶部</a></div>
<div id='comment_form_container'></div>
<div class='ad_text_commentbox' id='ad_text_under_commentbox'></div>
<div id='ad_t2'></div>
<div id='opt_under_post'></div>
<div id='cnblogs_c1' class='c_ad_block'></div>
<div id='under_post_news'></div>
<div id='cnblogs_c2' class='c_ad_block'></div>
<div id='under_post_kb'></div>
<div id='HistoryToday' class='c_ad_block'></div>
<script type='text/javascript'>
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverAdT2();
    deliverAdC1();
    deliverAdC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);   
</script>
</div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright &copy;2018 无知者云
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->
</body>
</html>
